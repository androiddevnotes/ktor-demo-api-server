# Getting Started Guide

## Project Overview

This is a Ktor-based API application for managing quotes and a dictionary. The application provides CRUD operations for quotes and dictionary entries, user authentication, and API key management.

## Technology Stack

- Backend Framework: Ktor
- Database: PostgreSQL
- ORM: Exposed
- Authentication: JWT and API Keys
- Database Migration: Flyway
- Serialization: Kotlinx Serialization
- Logging: SLF4J with Logback

## Setup Instructions

### 1. Prerequisites

- JDK 11 or later
- PostgreSQL
- Gradle (optional, as the project includes a Gradle wrapper)

### 2. Database Setup

1. Install PostgreSQL if not already installed.
2. Create a new database:
   createdb quotes_app_db
3. Create a user for the application:
   psql quotes_app_db
   CREATE USER adn_user WITH PASSWORD 'adn_password';
   GRANT ALL PRIVILEGES ON DATABASE quotes_app_db TO adn_user;
   \q

### 3. Environment Configuration

1. Create a `.env` file in the project root with the following content:
   DATABASE_URL=jdbc:postgresql://localhost:5432/quotes_app_db
   DATABASE_USER=adn_user
   DATABASE_PASSWORD=adn_password
   JWT_SECRET=your_jwt_secret
   JWT_ISSUER=quote-app
   JWT_AUDIENCE=quote-app-users
   UPLOAD_DIR=/path/to/upload/directory

   Replace the values with your actual configuration.

### 4. Building the Project

Run the following command in the project root:
./gradlew -t build

This command will start a continuous build process. The -t flag enables continuous build mode, which automatically rebuilds the project when changes are detected. This is particularly useful during development.

For a one-time build, you can omit the -t flag:
./gradlew build

### 5. Running Database Migrations

Flyway migrations will run automatically when the application starts. However, you can run them manually using:
./gradlew flywayMigrate

### 6. Running the Application

Start the application using:
./gradlew run

The application will be available at http://localhost:8080.

## Key Features

1. Quotes Management
   - CRUD operations for quotes
   - Pagination and search functionality
   - Image upload for quotes
   - Categorization of quotes

2. Dictionary Management
   - CRUD operations for dictionary entries
   - Pagination and search functionality
   - Support for examples, related terms, tags, languages, and additional resources

3. User Authentication
   - User registration and login
   - JWT-based authentication
   - Role-based access control (USER and ADMIN roles)

4. API Key Management
   - Generation of API keys for users
   - API key-based authentication for certain routes

## API Routes

Here are some of the main API routes:

1. User Registration: POST /api/v1/register
2. User Login: POST /api/v1/login
3. Generate API Key: POST /api/v1/api-key
4. Get Quotes: GET /api/v1/quotes
5. Create Quote: POST /api/v1/quotes
6. Get Dictionary Entries: GET /api/v1/dictionary
7. Create Dictionary Entry: POST /api/v1/dictionary
8. Search Quotes: GET /api/v1/quotes/search
9. Search Dictionary: GET /api/v1/dictionary/search

For a complete list of routes and their usage, refer to the docs/curl.md file.

## Development Workflow

1. Make changes to the code
2. Run tests: ./gradlew test
3. Build the project: ./gradlew build
4. Run the application: ./gradlew run
5. For database schema changes, create a new migration in src/main/resources/db/migration/

## Deployment

The application is configured for deployment on Heroku. Refer to docs/deployment.md for detailed deployment instructions.

## Documentation

- API documentation is generated using the IntelliJ IDEA Ultimate Ktor plugin with the "Generate OpenAPI" action.
- The OpenAPI documentation can be found at src/main/resources/openapi/documentation.yaml.
- Swagger UI is available at /swagger when the application is running.

## Troubleshooting

If you encounter any issues during setup or running the application, please check the following:

1. Ensure all environment variables are correctly set in the .env file
2. Check the application logs for any error messages
3. Verify that the database is running and accessible
4. Make sure you have the correct permissions for the upload directory

If problems persist, please refer to the project's issue tracker or contact the development team.

## Additional Resources

- Ktor Documentation: https://ktor.io/docs/
- Exposed Documentation: https://github.com/JetBrains/Exposed
- Flyway Documentation: https://flywaydb.org/documentation/
- PostgreSQL Documentation: https://www.postgresql.org/docs/